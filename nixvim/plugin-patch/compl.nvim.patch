
diff --git a/lua/compl.lua b/lua/compl.lua
index 835ee34..346967d 100644
--- a/lua/compl.lua
+++ b/lua/compl.lua
@@ -76,7 +76,7 @@ function M.setup(opts)
 	vim.api.nvim_create_autocmd({ "BufEnter", "LspAttach" }, {
 		group = group,
 		callback = function(args)
-			vim.bo[args.buf].completefunc = "v:lua.Compl.completefunc"
+			vim.bo[args.buf].omnifunc = "v:lua.Compl.completefunc"
 		end,
 	})
 
@@ -133,14 +133,12 @@ function M._start_completion()
 	if
 		-- No LSP clients
 		not next(vim.lsp.get_clients { bufnr = bufnr, method = "textDocument/completion" })
+		-- Snippet is active
+		or vim.snippet.active()
 		-- Not a normal buffer
 		or vim.api.nvim_get_option_value("buftype", { buf = bufnr }) ~= ""
 		-- Item is selected
 		or vim.fn.complete_info()["selected"] ~= -1
-		-- Cursor is at the beginning
-		or col == 0
-		-- Char before cursor is a whitespace
-		or vim.fn.match(before_char, "\\s") ~= -1
 		-- Context didn't change
 		or vim.deep_equal(M._ctx.cursor, { row, col })
 	then
@@ -190,7 +188,7 @@ function M._start_completion()
 		M._completion.responses = responses
 
 		if vim.fn.mode() == "i" then
-			vim.api.nvim_feedkeys(vim.keycode "<C-x><C-u>", "m", false)
+			vim.api.nvim_feedkeys(vim.keycode "<C-x><C-o>", "m", false)
 		end
 	end)
 	table.insert(M._ctx.pending_requests, cancel_fn)
@@ -335,11 +333,12 @@ function _G.Compl.completefunc(findstart, base)
 		return #a.label < #b.label
 	end)
 
-	return vim.iter(ipairs(matches))
+	matches = vim.iter(ipairs(matches))
 		:map(function(_, match)
 			local item = match.item
 			local client_id = match.client_id
 			local kind = vim.lsp.protocol.CompletionItemKind[item.kind] or "Unknown"
+			local menu = "LSP"
 			local word
 			if kind == "Snippet" then
 				word = item.label or ""
@@ -356,6 +355,7 @@ function _G.Compl.completefunc(findstart, base)
 				icase = 1,
 				dup = 1,
 				empty = 1,
+				menu = menu,
 				user_data = {
 					nvim = {
 						lsp = {
@@ -368,9 +368,55 @@ function _G.Compl.completefunc(findstart, base)
 			}
 		end)
 		:totable()
+	
+	--- We get supermaven completions and add them first
+	local CompPrev = require('supermaven-nvim.completion_preview')
+	local inlay_instance = CompPrev:get_inlay_instance()
+	if inlay_instance == nil or inlay_instance.is_active == false then
+		return matches
+	end
+	local get_sm_match = function ()
+		local inlay_instance = CompPrev:get_inlay_instance()
+		local text = inlay_instance.completion_text
+		local abbr = string.sub(base .. text, 0, 20)
+		local kind = "Text"
+		local cursor = vim.api.nvim_win_get_cursor(0)
+		local range = {
+		  start = {
+		    line = cursor[1] - 1,
+		    character = math.max(cursor[2] - inlay_instance.prior_delete - #inlay_instance.line_before_cursor - 1, 0),
+		  },
+		  ["end"] = {
+		    line = cursor[1] - 1,
+		    character = vim.fn.col("$"),
+		  },
+		}
+
+		local menu = "SuperMaven"
+		local match = {
+			word = base .. text,
+			abbr = abbr,
+			kind = kind,
+			menu = menu,
+			user_data = {
+				nvim = {
+					lsp = {
+
+						replace = true
+					}
+				}
+			}
+		}
+		CompPrev:dispose_inlay()
+		return match
+	end
+
+	table.insert(matches, 2, get_sm_match())
+	return matches
 end
 
-function M._start_info()
+
+function M._start_info(data)
 	M._info.close_windows()
 	M._ctx.cancel_pending()
 
@@ -459,10 +505,13 @@ function M._open_info_window(item)
 			height = height,
 			focusable = false,
 			style = "minimal",
-			border = "none",
+			border = "solid",
 		}
 
-		table.insert(M._info.winids, vim.api.nvim_open_win(M._info.bufnr, false, win_opts))
+		local wid = vim.api.nvim_open_win(M._info.bufnr, false, win_opts)
+		vim.api.nvim_win_set_option(wid, "winblend", 90)
+
+		table.insert(M._info.winids, wid)
 	end
 end
 
@@ -535,14 +584,37 @@ function M._on_completedone()
 	end
 end
 
-function M._start_snippet()
-	local filetype = vim.bo.filetype
+function M._start_snippet(ev)
+	local bufnr = 0
+	local filetype = vim.bo[bufnr].filetype
+	-- already created
+	-- if the server already exist, attach it to the buffer
+	if M.snippets_lsps[filetype] ~= nil then
+		local id = M.snippets_lsps[filetype].id
+		vim.lsp.buf_attach_client(bufnr, id)
+		return
+	end
+	-- not a normal buffer
+	if vim.bo[bufnr].buftype ~= "" then
+		return
+	end
+	-- check if filetype is in disabled list
+	local excluded = {
+		"help",
+		"telescope",
+		"oil",
+		"",
+	}
+	if vim.list_contains(excluded, filetype) then
+		return
+	end
+	local snippet_items = {}
 
 	local parse_snippet_data = function(snippet_data)
 		vim.iter(pairs(snippet_data or {})):each(function(_, snippet)
 			local prefixes = type(snippet.prefix) == "table" and snippet.prefix or { snippet.prefix }
 			vim.iter(ipairs(prefixes)):each(function(_, prefix)
-				table.insert(M._snippet.items, {
+				table.insert(snippet_items, {
 					detail = "snippet",
 					label = prefix,
 					kind = vim.lsp.protocol.CompletionItemKind["Snippet"],
@@ -557,7 +629,6 @@ function M._start_snippet()
 		end)
 	end
 
-	M._snippet.items = {}
 	vim.iter(ipairs(M._opts.snippet.paths)):each(function(_, root)
 		local manifest_path = table.concat({ root, "package.json" }, M._sep)
 		M._async_read_json(manifest_path, function(manifest_data)
@@ -580,7 +651,10 @@ function M._start_snippet()
 		end)
 	end)
 
-	M._start_snippet_server()
+	-- let the the table be populated
+	vim.defer_fn(function()
+		M._start_snippet_server(snippet_items, bufnr, filetype)
+	end, 1000)
 end
 
 -- https://github.com/nvim-lua/plenary.nvim/blob/master/lua/plenary/path.lua#L21
@@ -597,19 +671,18 @@ M._sep = (function()
 	end
 end)()
 
-function M._start_snippet_server()
-	if M._snippet.client_id then
-		vim.lsp.stop_client(M._snippet.client_id)
-		M._snippet.client_id = nil
-	end
+M.snippets_lsps = {}
 
-	M._snippet.client_id = vim.lsp.start {
-		name = "compl_snippets",
+function M._start_snippet_server(items, bufnr, ft)
+	local id = vim.lsp.start {
+		name = "snippets" .. "-" .. ft,
 		cmd = M._make_lsp_server {
 			isIncomplete = false,
-			items = M._snippet.items,
+			items = items,
 		},
 	}
+
+	M.snippets_lsps[ft] = { items = items, id = id}
 end
 
 function M._debounce(timer, timeout, callback)
